Задача о рюкзаке

Постановка задачи

Для начала предположим, что наш рюкзак выдержит 10 кг веса, а у каждой драгоценности в сундуке есть своя стоимость и масса (их объём — одинаковый). Вот что там лежит:

    серебро — 5 кг, 100 тыс. руб.
    золото — 4 кг, 400 тыс. руб.
    драгоценный камень — 6 кг, 300 тыс. руб.
    платина 3 кг, 500 тыс. руб.

Что нам выбрать, чтобы общая стоимость нашей находки была максимальной?

Решение

Мы опишем наш сундук как Chest:

    // сундук с драгоценностями
    type Chest struct {
        cost []int // стоимость предметов
        mass  []int // масса предметов
    }

Вот наши исходные данные:

    w := 10       // грузоподъёмность рюкзака
    chest := Chest{
        cost: []int{100, 400, 300, 500}, // стоимость
        mass:  []int{5, 4, 6, 3},         // масса
    }
    n := len(chest.cost) // количество драгоценностей

Сначала мы создадим двумерный слайс из n + 1 строк и w + 1 столбцов. Двумерный слайс — это слайс, элементами которого являются другие слайсы:

    // выделим память под слайсы
    matrix := make([][]int, n+1)
    for i := range matrix {
        matrix[i] = make([]int, w+1)
    }

Номер строки i — это набор всех элементов из строк 1 − i. Например, значения в строке 3 предполагают, что у нас есть только элементы 1, 2 и 3.

Номер столбца j обозначает грузоподъёмность нашего рюкзака. Поэтому значения в столбце 5, например, предполагают, что наш рюкзак может вместить 5 кг веса.

Таким образом, запись в строке i столбца j — это максимальное значение, которое можно получить с предметами 1, 2, 3... i в рюкзаке, который вмещает j кг веса.

Заполнение таблицы

Напомним, что в строке i и столбце j мы решаем, поместятся ли предметы 1, 2, 3... i в рюкзак вместимости j. Предмет i либо поместится туда, либо нет. Следовательно, нам нужно сравнить максимальное значение, которое мы можем получить с элементом i и без него.

Максимальное значение, которое мы можем получить без элемента i, можно найти в строке i-1, столбце j. Любое максимальное значение с предметами 1, 2, 3... должно быть равно максимальному значению, которое мы можем получить с предметами 1, 2, 3... i-1.

Чтобы вычислить максимальное значение, которое мы можем получить с предметом i, нам сначала нужно сравнить его вес с грузоподъёмностью рюкзака. Если предмет i весит больше, чем выдержит рюкзак, проводить расчёт нет смысла. В таком случае мы решаем не брать элемент i (то есть смотрим на значение в строке выше в том же столбце).

Предположим, что предмет i весит меньше, чем может выдержать рюкзак. В таком случае мы можем взять i, если он увеличит максимальную ценность рюкзака. Тогда она будет равна сумме стоимости самого предмета i и максимальной ценности, которую можно получить, если дозаполнить рюкзак до предела. Разумеется, нам выгодно набить его под завязку.

Следовательно, в строке i и столбце j мы выберем максимальное значение либо без элемента i, либо с ним — в зависимости от того, какое значение больше.
грузоподъёмность / наполнение 	0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	10
0. пустой 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0
1. серебро 	0 	0 	0 	0 	0 	100 	100 	100 	100 	100 	100
2. золото 	0 	0 	0 	0 	400 	400 	400 	400 	400 	500 	500
3. драгоценный камень
4. платина

В строке 3 (золото) и столбце 5 (вместимость рюкзака 4 кг) мы можем либо включить золото (вес 4 кг), либо нет. Если мы решим не включать его, наше максимальное возможное значение будет таким же, как если бы у нас был только элемент 1 на выбор (который находится в строке выше, то есть 0).

В строке 3 (золото) и столбце 10 (вместимость рюкзака 9 кг) мы снова можем выбрать, брать золото или нет. Если мы решим не делать этого, наше максимальное возможное значение будет таким же, как и в строке выше в том же столбце, то есть 100 (только серебро со стоимостью 100).

Если мы положим золото, то получим оставшуюся вместимость рюкзака: 9 — 4 = 5. Максимальное значение, которое можно получить при вместимости 5 кг, мы можем узнать, если посмотрим на строку выше, в столбец 5. Таким образом, вот максимальное значение, которое мы можем получить с золотом и серебром: 400 + 100 = 500.

Функция для получения максимальной стоимости предметов может выглядеть так:

    func Knapsack(chest *Chest, maxWeight int) int {
        n := len(chest.cost) // количество драгоценностей
        matrix := make([][]int, n+1)
        for i := range matrix {
            matrix[i] = make([]int, maxWeight+1)
        }

        for item := 1; item <= n; item++ { // переберём все предметы из сундука
            for capacity := 1; capacity <= maxWeight; capacity++ {
                // всё ниже — о рюкзаке вместимостью capacity
                maxcostWithoutCurrent := matrix[item-1][capacity] //  максимальная стоимость предыдущих предметов
                maxcostWithCurrent := 0                        //  для хранения максимальной стоимости, если положим текущий предмет

                weightOfCurrent := chest.mass[item-1] // масса текущего
                if capacity >= weightOfCurrent {    // проверяем, влезет ли текущий предмет в рюкзак
                    // если текущий влез, то смотрим, что ещё взять
                    maxcostWithCurrent = chest.cost[item-1]               // сначала положим текущий предмет
                    remainingCapacity := capacity — weightOfCurrent     // проверим, осталось ли место
                    maxcostWithCurrent += matrix[item-1][remainingCapacity] // максимальная стоимость оставшегося места
                }

                matrix[item][capacity] = max(maxcostWithoutCurrent, maxcostWithCurrent) // выбираем, нужно ли класть текущий
            }
        }
        return matrix[n][maxWeight]
    }

После того, как таблица заполнится, окончательное решение можно будет найти в последней строке последнего столбца. Там будет представлена максимально возможная стоимость сокровищ, которые можно будет унести в нашем рюкзаке.

Задача о рюкзаке помогает в принятии решений в самых разных областях жизни, начиная от поиска наиболее безотходного способа резки сырья на производстве до выбора портфеля инвестиций.
