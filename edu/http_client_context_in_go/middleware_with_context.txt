    Middleware и контекст

Чтобы передавать значения между обработчиками HTTP в Go, можно использовать метод context.WithValue(). Он добавляет значения в контекст запроса и получает их в других обработчиках запросов.

Вот пример кода:

    func myMiddleware(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            // добавляем значение в контекст запроса
            ctx := context.WithValue(r.Context(), "myKey", "myValue")
            // вызываем следующий обработчик запроса с обновлённым контекстом
            next.ServeHTTP(w, r.WithContext(ctx))
        })
    }


Здесь myKey и myValue — это ключ и значение, которые мы добавляем в контекст. Метод WithContext() создаёт новый объект http.Request с обновлённым контекстом.

Чтобы получить значение из контекста в другом обработчике, нужно использовать метод Value().

Вот пример кода:

    func myHandler(w http.ResponseWriter, r *http.Request) {
        // получаем значение из контекста запроса
        val := r.Context().Value("myKey")
        if val != nil {
            fmt.Fprintln(w, val)
        } else {
            fmt.Fprintln(w, "Value not found in context")
        }
    }


Здесь мы используем метод Context() объекта http.Request, чтобы получить контекст запроса, и метод Value(), чтобы получить значение по ключу "myKey". Если значение не найдено, мы выводим сообщение об ошибке.

Не только запросы

context.Context позволяет не только отменять запросы, но и писать структурированный конкурентный (то есть многопоточный) код. Мы рассмотрим это в модуле 2.
