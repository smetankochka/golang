Инкапсуляция

Инкапсуляция объединяет данные и методы, которые работают с этими данными, в единый объект. Таким образом она скрывает реализацию объекта и открывает для взаимодействия только публичный интерфейс.

В Go инкапсуляция устроена так же, как и возможность экспорта. Если вам нужно сделать поля и методы приватными, запишите их названия со строчных букв:

package main

import (
    "fmt"
    "math"
)

type Circle struct {
    radius float64
}

func (c *Circle) Area() float64 {
    return math.Pi * c.radius * c.radius
}

func NewCircle(radius float64) *Circle {
    return &Circle{radius: radius}
}

func main() {
    c := NewCircle(5)
    fmt.Println(c.Area())
}

Здесь мы определяем тип Circle с приватным полем radius и публичным методом Area(), который вычисляет площадь круга. Мы также определяем функцию NewCircle(), которая создаёт новый экземпляр структуры Circle. Затем мы создаём новый круг с радиусом 5 и вызываем метод Area(), чтобы вычислить его площадь.

Мы скрываем внутреннюю реализацию объекта Circle и предоставляем только публичный метод Area(), который вычисляет его площадь. Код, который использует структуры Circle, не знает, как она реализована внутри, и работает только с публичным интерфейсом объекта.
