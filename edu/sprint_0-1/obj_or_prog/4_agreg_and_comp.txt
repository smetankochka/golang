Агрегация и композиция

При агрегации один объект содержит в себе другой как свою часть. Однако внутренний объект не абсолютно зависим от внешнего. Например, автомобильный двигатель может существовать и сам по себе, без автомобиля.

Агрегация в Go происходит, когда структура включает в себя другую структуру как своё поле. Методы и поля внутренней структуры могут использоваться только через экземпляр этой структуры внутри внешней структуры:

package main

import "fmt"

type Engine struct {
    Model string
}

type Car struct {
    Make   string
    Engine Engine
}

func main() {
    engine := Engine{Model: "V6"}
    car := Car{Make: "Toyota", Engine: engine}

    fmt.Printf("Car Make: %s\n", car.Make)
    fmt.Printf("Engine Model: %s\n", car.Engine.Model)
}

При композиции один объект — это часть другого и не может существовать сам по себе. Например, если развязать узел на надутом воздушном шарике, воздух из него выйдет и станет обычным воздухом, который не может сам по себе надувать шарики.

Композиция в Go происходит, когда одна структура встраивается в другую. При этом имя внутренней структуры внутри внешней структуры не указывается явно. Методы и поля внутренней структуры доступны напрямую через внешнюю структуру:

package main

import "fmt"

type Engine struct {
    Model string
}

type Car struct {
    Make string
    Engine // встраивание структуры
}

func main() {
    car := Car{Make: "Ford", Engine: Engine{Model: "V8"}}

    fmt.Printf("Car Make: %s\n", car.Make)
    fmt.Printf("Engine Model: %s\n", car.Model) // Мы можем обращаться к Engine как к полю Car
}

Агрегация 	Композиция
Объект одного класса создаётся внутри объекта другого класса 	Объект одного класса — член другого класса
Объекты в агрегации могут существовать отдельно друг от друга 	Объекты в композиции существуют только в контексте друг друга
Агрегация не влияет на жизненный цикл объекта 	Жизненный цикл объекта в композиции зависит от жизненного цикла объекта, которому он принадлежит