

Чтение и запись файлов — базовые операции для многих приложений. Сегодня вы узнаете, как работать с файлами в Go. Но для начала определимся с терминами.

Файл — это набор данных (например, программа, текст, фото), который сохранён на носителе информации. Подробнее о файлах можно прочесть тут.

Чтение файла

Допустим, у нас есть файл literature.txt со списком литературы на лето. Давайте прочитаем его:

    data, err := os.ReadFile("literature.txt")

Теперь в объекте data есть содержимое нашего файла. Отлично! Урок можно заканчивать!

Но что, если файл очень большой — например, ваш любимый фильм в отличном качестве? Когда мы попытаемся его прочесть, всё содержимое файла скопируется в объект data.

Почему это плохо? Во-первых, такой дубль файла займёт всё свободное место в оперативной памяти. Во-вторых, программа будет читать его очень долго, а мы хотим, чтобы она работала быстрее.

Как исправить положение? Мы можем просто открыть файл, но не читать его:

    f, err := os.Open("movie.mkv")

В таком случае в объекте f будет не содержимое файла, а его дескриптор, с помощью которого мы прочтём сам файл:

    buffer := make([]byte, 100) // будем считывать файл в этот слайс
    _, err := f.Read(buffer) // читаем часть файла

buffer — это объект, куда мы будем читать файл. После чтения в нём находится 100 байтов нашего файла — либо ещё меньше, если сам файл небольшой.

Как же нам прочитать весь файл с фильмом? Мы будем делать это последовательно:

    buffer := make([]byte, 100)
    for {
        // n — число байтов, которые удалось прочитать
        n, err := f.Read(buffer) // прочитаем часть в buffer
        if err == io.EOF { // ошибка показывает, что файл прочитан полностью
            break // выходим из цикла, файл прочитан
        }
        if err != nil { // эту ошибку нужно обработать
            // ошибка чтения
        }
        process(buffer[:n]) // функция для дальнейшей обработки
    }

Вернёмся к literature.txt. Предположим, в нём хранятся данные по всей школьной программе литературы. Для того, чтобы прочесть этот файл, лучше также воспользоваться дескриптором. Считывать определённое количество байтов в буфер будет неудобно — программа может обрезать строку, если она не поместится в нужный объём.

Было бы гораздо удобнее считывать файл построчно. Вот как это сделать:

    f, err := os.Open("movie.mkv")
    fileScanner := bufio.NewScanner(f) //NewScanner возвращает специальный сканер для чтения построчно
    for fileScanner.Scan() { // сканер перемещается к следующему токену, то есть к следующей части текста до символа новой строки
        process(fileScanner.Text()) // функция для обработки строки с литературой — например, здесь можно попросить YaGPT дать пересказ произведения
    }

И ещё раз про большие файлы. Предположим, у вас есть текстовый файл с логами работы программы. Вам нужно прочесть только последние записи из него. Самый простой способ — прочесть файл от начала до конца, но оптимальнее будет применить функцию Seek. С её помощью можно читать файл не с начала, а с выбранного места: Вот как можно её использовать:

    offset := 1024
    f.Seek(offset, 0) // сместимся от начала файла
    buffer := make([]byte, 100)
    n, err := f.Read(buffer) // прочитаем в buffer с позиции 1024




Получить дескриптор на чтение файла — это как открыть книгу, но не начать её читать. А что нам нужно сделать после чтения? Правильно, закрыть книгу. Также и с дескриптором файла — его нужно обязательно закрыть.

Если не сделать этого, дескрипторы могут просто закончиться. Тогда наша программа будет вести себя так, как будто у нас переполнен жёсткий диск, хотя места на нём может быть предостаточно. Отсюда — золотое правило использования любых конечных ресурсов (не только файловых дескрипторов, но и, например, подключений к базе данных): взять, использовать, вернуть на место.

    err := f.Close()

Чтобы не забыть это сделать, рекомендуем использовать конструкцию defer. Она поместит код закрытия рядом с открытием:

    file, err := os.Open("movie.mkv") // откроем файл
    defer f.Close() // закроем файл
    // здесь файл будет читаться



Если у вас есть слайс с данными, записать его можно с помощью функции os.WriteFile:

А что случится, если файла, в который мы хотим записать данные, не существует? os.Writefile создаст его с указанными разрешениями. А если файл есть, функция перезапишет его содержимое, тоже не меняя разрешения.

Мы можем получить дескриптор самого файла так же, как дескриптор на его чтение:

    f, err := os.Create(`C:\Users\Docs\myfile.txt`)
    defer func() {
        errClose := f.Close() // не забываем закрыть и проверить на ошибку — при записи файла это важно
    }()

Если файл существует, он будет перезаписан, а если не существует — создан. Теперь мы можем записать данные с помощью дескриптора:

    n, err := f.WriteString("hello") // n — сколько байтов записали

А что, если нам нужно дописать данные в уже существующий файл? Функция os.Create заменит его на пустой. Чтобы этого не случилось, воспользуемся os.OpenFile:

    f, err := os.OpenFile(filename, os.O_APPEND | os.O_WRONLY, 0600)

Флаг os.O_APPEND указывает, что файл открывается в режиме добавления. Теперь при записи через дескриптор f исходные данные останутся в файле.

Что, если мы хотим перезаписать только часть файла? Для этого можно использовать уже знакомую нам функцию Seek:

    f, err := os.OpenFile(file, os.O_WRONLY, 0600)
    if err != nil {
        // обработка ошибки
    }
    offset := 1024
    f.Seek(offset, 0) // сместимся на 1024
    f.WriteString("offset write")

Число 0600 предоставляет права доступа к файловой системе. У этих битов — одинаковое определение во всех системах, так что информация о файлах может быть перенесена из одной операционной системы в другую.

Рекомендуем использовать разные наборы флагов — например, попробуйте читать файл и писать в него по одному дескриптору.

