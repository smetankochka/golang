Таймеры

Пакет time также позволяет создавать таймеры. С их помощью можно запланировать действия через определённые промежутки времени. Таймеры создаёт функция NewTimer: ей в качестве аргумента передаётся промежуток времени в виде типа time.Duration.

Вот как это работает:

    package main

    import (
        "fmt"
        "time"
    )

    func main() {
        _ := time.NewTimer(5 * time.Second) // создается таймер  на 5 секунд
        duration := 5 * time.Second
        fmt.Println("Duration:", duration)

        // Выполняем действия в течение заданного промежутка времени
        fmt.Println("Start")
        time.Sleep(duration)
        fmt.Println("End")

        // Вычисляем разницу между моментами времени
        t1 := time.Now()
        time.Sleep(duration)
        t2 := time.Now()
        diff := t2.Sub(t1)
        fmt.Println("Difference:", diff)
    }

Здесь мы создаём переменную duration типа time.Duration — промежуток времени в 5 секунд, и используем её, чтобы выполнить действия в течение этого времени с помощью функции Sleep. Далее мы пишем переменные t1 и t2, чтобы получить текущее время перед тем, как 5 секунд начались, и после того, как они окончились. Затем мы вычисляем разницу между моментами времени с помощью метода Sub типа time.Time, который возвращает значение типа time.Duration.

Вывод программы:

    Duration: 5s
    Start
    End
    Difference: 5.007856s

Работа с тиками

В современных компьютерах тики (короткие промежутки времени) помогают синхронизировать работу компонентов системы и настроить работу системных таймеров.

С помощью пакета time вы можете создавать тики, которые приостанавливают действия, пока не истечёт заданный интервал времени. За это отвечает функция Tick, которой в качестве аргумента передаётся промежуток времени в виде типа time.Duration:

    package main

    import (
        "fmt"
        "time"
    )

    func main() {
        ticker := time.Tick(1 * time.Second)
        for t := range ticker {
            fmt.Println("Tick at", t)
        }
    }

Этот код создаёт тик на 1 секунду и выводит сообщение "Tick at" с моментом времени каждый раз, когда тик срабатывает.

Теперь давайте рассмотрим примеры работы со временем в Go на конкретных примерах.
