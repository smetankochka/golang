С помощью клиента http.Client в Go вы можете отправлять HTTP-запросы и получать ответы, автоматически следовать за перенаправлениями, обрабатывать cookie и т. д. Чтобы оптимизировать производительность, в http.Client настраиваются параметры соединения — таймауты, размеры буферов и т. д.

Контекст клиента помогает веб-разработчикам создавать надёжные и безопасные приложения, которые могут обрабатывать ошибки и не ломаться под нагрузкой.

Как делать запрос и читать ответ

Чтобы сделать HTTP-запрос в Go, можно использовать net/http:

    package main

    import (
        "net/http"
    )

    func main() {
        req, err := http.NewRequest(http.MethodGet, "https://ya.ru", nil)
        if err != nil {
            fmt.Println(err.Error())
            return
        }

        client := &http.Client{}
        resp, err := client.Do(req)
        if err != nil {
            fmt.Println(err.Error())
            return
        }
        // читаем тело ответа
        body, err := io.ReadAll(resp.Body)
        if err != nil {
            fmt.Println(err)
            return
        }

        // выводим тело ответа на экран
        fmt.Println(string(body))
    }


Здесь мы создаём новый HTTP-запрос функцией NewRequest(), затем — новый клиент и отправляем запрос с помощью функции Do().

Когда мы отправляем HTTP-запрос, сервер возвращает ответ в виде потока байтов. Чтобы прочесть его, нам нужен resp.Body — объект типа io.ReadCloser.

Читать поток байтов напрямую может быть неудобно, поэтому рекомендуем функцию io.ReadAll. Она читает все данные из потока и возвращает их в виде байтового массива.
