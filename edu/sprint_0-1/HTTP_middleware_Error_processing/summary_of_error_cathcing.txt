

Вот пример middleware на Go, который ловит паники и возвращает ошибку 500:

    func PanicMiddleware(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            defer func() {
                if err := recover(); err != nil {
                    log.Printf("Panic: %v", err)
                    http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
                }
            }()
            next.ServeHTTP(w, r)
        })
    }


Эта функция принимает http.Handler и возвращает новый http.Handler, который оборачивает вызов next.ServeHTTP в блок defer для перехвата паники. Если происходит паника, middleware записывает сообщение в журнал и возвращает ошибку 500.

Чтобы использовать этот middleware, мы можем добавить его к нашему обработчику:

    mux := http.NewServeMux()
    mux.HandleFunc("/", HomeHandler)

    // Добавляем middleware для перехвата паник
    handler := PanicMiddleware(mux)

    http.ListenAndServe(":8000", handler)


Это поможет избежать неожиданных сбоев в работе приложения и упростит отладку.
