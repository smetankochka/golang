

Архитектура «клиент-сервер» — это способ организации работы в интернете. Когда мы заходим на сайт, наш браузер (клиент) отправляет запрос на сервер, который хранит информацию о сайте. Сервер обрабатывает запрос и в ответ высылает данные, которые браузер показывает на экране.

HTTP-сервер — это набор программ, которые обрабатывают запросы от клиентов (браузеров) и отвечают им в формате HTTP (протокол передачи гипертекста). HTTP-серверы хранят и предоставляют доступ к веб-страницам, файлам, изображениям, видео и другим ресурсам в интернете.

Браузер — это программа, которую мы используем для просмотра веб-сайтов. В ней мы вводим адреса веб-страниц и просматриваем их содержимое.

Программа curl — это инструмент командной строки, который позволяет отправлять запросы на HTTP-серверы и получать от них ответы. С помощью curl можно, например, загрузить содержимое веб-страницы или файла, отправить данные на сервер или проверить доступность сайта. Она может быть полезной для разработчиков и администраторов сайтов, которые хотят проверить их работоспособность или получить информацию о конкретных ресурсах.

На Linux, MacOS, Windows 10 (и выше) утилита curl установлена по умолчанию. Для более ранних версий Windows эту программу можно скачать и установить.

Вот как можно использовать curl:

    curl ya.ru

HTTP (HyperText Transfer Protocol) — это сетевой протокол передачи гипертекста. С помощью HTTP сервер и клиент обмениваются данными. Этот протокол состоит из двух основных компонентов: запросов и ответов.

Запрос

Вот на что делится HTTP-запрос:

    Метод запроса — указывает, что именно нужно сделать с ресурсом (GET, POST, PUT, DELETE и т. д.)
    URL-адрес ресурса — указывает, какой ресурс нужно получить или изменить
    Заголовки запроса — дают дополнительную информацию о запросе (например, тип данных, язык и т. д.)
    Тело запроса (необязательно) — содержит данные, которые нужно передать на сервер (например, при отправке формы)

Пример HTTP запроса:

    POST /api/users HTTP/1.1 # метод и URL
    Host: example.com # обязательный заголовок Host
    Content-Type: application/json  # заголовок с типом данных
    Authorization: Bearer abc123 # заголовок с токеном авторизации

    {
      "name": "John Doe",
      "email": "johndoe@example.com",
      "password": "123456"
    } # тело запроса

Ответ

Вот на что делится HTTP-ответ:

    Статус-код — указывает на результат выполнения запроса (например, 200 — успешный ответ, 404 — ресурс не найден, 500 — ошибка сервера и т. д.)
    Заголовки ответа — дают дополнительную информацию об ответе (например, тип данных, дата и время, кэширование и т. д.)
    Тело ответа (необязательно) — содержит данные, которые были запрошены, или результат выполнения запроса (например, HTML-страницу, JSON-данные и т. д.)

Пример HTTP ответа:

    HTTP/1.1 200 OK # код ответа
    Date: Mon, 12 Apr 2021 10:00:00 GMT # заголовок c датой и временем, не обязателен
    Content-Type: application/json # заголовок с типом данных

    {
      "id": 123,
      "name": "John Doe",
      "email": "johndoe@example.com",
      "created_at": "2021-04-10T12:00:00Z"
    } # тело ответа

Статусы

Разработчики и администраторы сайтов используют HTTP-статусы, чтобы определить причины ошибок при обращении к ресурсам и исправить ситуацию. Например, если сайт возвращает код состояния 404 Not Found, это может означать, что ресурса на сервере нет, и нужно проверить правильность URL-адреса.

Существуют и несколько шуточных HTTP-статусов. Например, код ошибки 418 I′m a teapot сообщает о том, что сервер не может приготовить кофе, потому что он — чайник. Эта ошибка отсылает к Hyper Text Coffee Pot Control Protocol (гипертекстовому протоколу кофейников) — первоапрельской шутке 1998 года от веб-разработчиков.
