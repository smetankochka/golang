Модификаторы доступа

Модификаторы доступа в ООП управляют доступом к полям и методам класса из других частей программы. Они помогают ограничить доступ к данным только там, где это необходимо.

В C# есть четыре модификатора доступа:

    public: члены класса могут быть доступны из любой части программы
    private: члены класса могут быть доступны только из того же класса
    protected: члены класса могут быть доступны только из того же класса или его наследников
    internal: члены класса могут быть доступны только из той же сборки

В Go нет явных модификаторов доступа. Зато есть соглашение о том, что названия полей, которые начинаются с прописной буквы, — экспортируемые и могут быть доступны из других пакетов. В свою очередь названия со строчной буквы доступны только из того же пакета.

Например, вот так можно определить структуру с приватным полем и публичным методом в Go:

type MyStruct struct {
    myField int // Приватное поле
	MyFiled int // Публичное поле
}

func (s *MyStruct) MyMethod() {
    // Этот метод может получить доступ к myField,
    // потому что они находятся в том же пакете
    s.myField = 42
}

А вот так выглядит класс с приватным полем и публичным методом в C#:

public class MyClass
{
    private int myField;

    public void MyMethod()
    {
        // Этот метод может получить доступ к myField,
        // потому что находится в том же классе
        myField = 42;
    }
}

В обоих языках модификаторы доступа контролируют доступ к полям и методам класса, защищают программиста от ошибок. В C# модификаторы доступа конкретнее. Зато соглашение на основе названия полей в Go гибче и лаконичнее .
