Массивы и слайсы

В прошлом модуле мы уже работали со слайсами. Давайте погрузимся в них более глубоко, и начнём с определений.

Массив в Go — это структура данных, которая позволяет хранить и обрабатывать множество элементов одного типа. Можно назвать массив набором ячеек памяти, у каждой из которых — свой уникальный индекс, то есть положение в массиве.

Слайс в Go — это динамический массив, который может менять свои размеры во время работы программы. С его помощью можно добавлять, удалять и изменять элементы в любом месте последовательности, обращаться к группе элементов по индексам или диапазонам.

Как устроен слайс под капотом? Это структура с тремя полями:

    type slice struct {
        array unsafe.Pointer // указатель на элемент массива, с которого начинается слайс
        len   int            // длина
        cap   int            // ёмкость
    }

В самом слайсе элементов массива нет, но есть ссылка на его конкретный участок.

Слайс от слайса будет вести на исходный массив, а не на слайс.

Рассмотрим вот такой код:

    a := [5]int{0, 1, 1, 2, 3} // объявляем массив a из пяти элементов
    b := a[:] // в переменную b присваиваем слайс всего массива
    c := b[:] // в переменную c присваиваем слайс всего слайса

    c[0] = 42

    fmt.Println(a) // [42 1 1 2 3]
    fmt.Println(b) // [42 1 1 2 3]
    fmt.Println(c) // [42 1 1 2 3]

Почему код сработал так? Потому что оба слайса ссылались на один и тот же массив. Когда мы меняем элемент слайса, мы меняем элемент исходного массива.
